const int topSensorPin = A1;
const int botSensorPin = A0;

const int buttonPin = 2;  

int buttonPushCounter = 0;   // counter for the number of button presses
int buttonState = 0;         // current state of the button
int lastButtonState = 0;     // previous state of the button

int topSensorValue = 0;
int botSensorValue = 0;

int baselineMax = 0; // upper bound of what is considered "normal light"
int baselineMin = 1000; // lower bound of what is considered "normal light"

int obstructedMax = 0; // upper bound of what is considered "obstructed light"
int obstrcutedMin = 1000; // lower bound of what is considered "obstructed light"

void setup() {
  // put your setup code here, to run once:
  pinMode(buttonPin, INPUT);
  
  Serial.begin(9600);
}

// The code below takes 0.0217 +/- 0.0001 seconds to run. NEEDS UPDATE !
void loop() {
  // put your main code here, to run repeatedly:
  topSensorValue = analogRead(topSensorPin);
  botSensorValue = analogRead(botSensorPin);

  // Serial.print("Raw Sensor Value: "); // Enable for serial monitor, but not serial plotter
  Serial.print(0); // lowest light level, for plot scaling
  Serial.print(",");
  Serial.print(topSensorValue);
  Serial.print(","); 
  Serial.print(botSensorValue);
  Serial.print(","); 
  Serial.print(1000); // highest light level, for plot scaling
  Serial.print("\n");

  // read the pushbutton input pin:
  buttonState = digitalRead(buttonPin);
  
  // compare the buttonState to its previous state
  if (buttonState != lastButtonState) {
    // if the state has changed
    if (buttonState == HIGH) {

      // code to establish unblocked and blocked sensor baselines and tolerances
      for (int iterBaseline = 0; iterBaseline < 1000; iterBaseline ++){
        topSensorValue = analogRead(topSensorPin); // using the top sensor so that the ball can sit at the bottom of the tube
      
        if(topSensorValue < baselineMin){
          baselineMin = topSensorValue;
        }
      
        else if (topSensorValue > baselineMax){
          baselineMax = topSensorValue;
        }
      }
    }
    // Delay a little bit to avoid bouncing
    delay(50);
  }
  // save the current state as the last state, for next time through the loop
  lastButtonState = buttonState;
}
